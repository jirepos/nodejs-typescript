{
  "compilerOptions": {
    // 생성된 모듈에서 사용할 문법 
    "target": "ES2020",
    "useDefineForClassFields": true,
    // 생성된 모듈에서 사용할 import 문법 결정 
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,
    // 모듈이 기본 내보내기를 명시적으로 지정하지 않은 경우. has no default export 에러 발생 
    // 이런경우, import * as path from 'path'; 와 같이 작성해야하는데
    // true로 설정하면 import path from 'path'; 와 같이 작성 가능
    // https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
    "allowSyntheticDefaultImports": true,

    /* Bundler mode */
    // TypeScript 컴파일러가 import 구문에서 모듈을 찾는 방식 결정
    // https://www.typescriptlang.org/tsconfig#moduleResolution
    // Node.js 12 이상에서는 ECMAscript imports와 CommonJS require를 모두 지원
    // 'node16'과 'nodenext' 사용 가능,  기존의 모듈 해석 방식은 'node'를 사용 
    // "moduleResolution": "Node16",
    // 번들러와 함께 사용하기 위한 'bundler'. node16 및 nodenext와 마찬가지로 이 모드는 package.json '가져오기' 및 '내보내기'를 
    // 지원하지만 Node.js 해결 모드와 달리 번들러는 가져오기의 상대 경로에 파일 확장자를 요구하지 않습니다.
    // "moduleResolution": "Bundler",
    // .ts 확장자 허용 
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": false,    
    "allowJs": true,
    "declaration": true,
    "declarationMap": true,
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,

    "typeRoots": ["./node_modules/@types", "./@types"],
  },

  // 컴파일 포함할 파일/디렉토리 패턴 
  "include": ["src"] ,
  "ts-node": {
    // Tell ts-node CLI to install the --loader automatically, explained below
    "esm": true
  }
}
